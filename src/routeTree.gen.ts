/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RecoveryImport } from './routes/recovery'
import { Route as IndexImport } from './routes/index'
import { Route as TagsIndexImport } from './routes/tags/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as SearchIndexImport } from './routes/search/index'
import { Route as MeIndexImport } from './routes/me/index'
import { Route as HistoryIndexImport } from './routes/history/index'
import { Route as FeedbackIndexImport } from './routes/feedback/index'
import { Route as ExploreIndexImport } from './routes/explore/index'
import { Route as DiscussionsIndexImport } from './routes/discussions/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AiIndexImport } from './routes/ai/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as SquadNewImport } from './routes/squad/new'
import { Route as SquadTagNameImport } from './routes/squad/$tagName'
import { Route as ProfileProfileTagImport } from './routes/profile/$profileTag'
import { Route as PostNewImport } from './routes/post/new'
import { Route as PostPostIdImport } from './routes/post/$postId'
import { Route as MeEditImport } from './routes/me/edit'
import { Route as IntegrationCallbackImport } from './routes/integration/callback'
import { Route as DiscussionsNewImport } from './routes/discussions/new'
import { Route as DiscussionsDiscussionIdImport } from './routes/discussions/$discussionId'
import { Route as DevCropImport } from './routes/dev/crop'
import { Route as AdminUsersIndexImport } from './routes/admin/users/index'
import { Route as AdminSquadsIndexImport } from './routes/admin/squads/index'
import { Route as AdminPostsIndexImport } from './routes/admin/posts/index'
import { Route as SquadInviteTagNameImport } from './routes/squad/invite.$tagName'
import { Route as SquadEditTagNameImport } from './routes/squad/edit.$tagName'
import { Route as PostEditPostIdImport } from './routes/post/edit.$postId'
import { Route as DiscussionsEditDiscussionIdImport } from './routes/discussions/edit.$discussionId'

// Create/Update Routes

const RecoveryRoute = RecoveryImport.update({
  id: '/recovery',
  path: '/recovery',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TagsIndexRoute = TagsIndexImport.update({
  id: '/tags/',
  path: '/tags/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const SearchIndexRoute = SearchIndexImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRoute,
} as any)

const MeIndexRoute = MeIndexImport.update({
  id: '/me/',
  path: '/me/',
  getParentRoute: () => rootRoute,
} as any)

const HistoryIndexRoute = HistoryIndexImport.update({
  id: '/history/',
  path: '/history/',
  getParentRoute: () => rootRoute,
} as any)

const FeedbackIndexRoute = FeedbackIndexImport.update({
  id: '/feedback/',
  path: '/feedback/',
  getParentRoute: () => rootRoute,
} as any)

const ExploreIndexRoute = ExploreIndexImport.update({
  id: '/explore/',
  path: '/explore/',
  getParentRoute: () => rootRoute,
} as any)

const DiscussionsIndexRoute = DiscussionsIndexImport.update({
  id: '/discussions/',
  path: '/discussions/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => rootRoute,
} as any)

const AiIndexRoute = AiIndexImport.update({
  id: '/ai/',
  path: '/ai/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const SquadNewRoute = SquadNewImport.update({
  id: '/squad/new',
  path: '/squad/new',
  getParentRoute: () => rootRoute,
} as any)

const SquadTagNameRoute = SquadTagNameImport.update({
  id: '/squad/$tagName',
  path: '/squad/$tagName',
  getParentRoute: () => rootRoute,
} as any)

const ProfileProfileTagRoute = ProfileProfileTagImport.update({
  id: '/profile/$profileTag',
  path: '/profile/$profileTag',
  getParentRoute: () => rootRoute,
} as any)

const PostNewRoute = PostNewImport.update({
  id: '/post/new',
  path: '/post/new',
  getParentRoute: () => rootRoute,
} as any)

const PostPostIdRoute = PostPostIdImport.update({
  id: '/post/$postId',
  path: '/post/$postId',
  getParentRoute: () => rootRoute,
} as any)

const MeEditRoute = MeEditImport.update({
  id: '/me/edit',
  path: '/me/edit',
  getParentRoute: () => rootRoute,
} as any)

const IntegrationCallbackRoute = IntegrationCallbackImport.update({
  id: '/integration/callback',
  path: '/integration/callback',
  getParentRoute: () => rootRoute,
} as any)

const DiscussionsNewRoute = DiscussionsNewImport.update({
  id: '/discussions/new',
  path: '/discussions/new',
  getParentRoute: () => rootRoute,
} as any)

const DiscussionsDiscussionIdRoute = DiscussionsDiscussionIdImport.update({
  id: '/discussions/$discussionId',
  path: '/discussions/$discussionId',
  getParentRoute: () => rootRoute,
} as any)

const DevCropRoute = DevCropImport.update({
  id: '/dev/crop',
  path: '/dev/crop',
  getParentRoute: () => rootRoute,
} as any)

const AdminUsersIndexRoute = AdminUsersIndexImport.update({
  id: '/admin/users/',
  path: '/admin/users/',
  getParentRoute: () => rootRoute,
} as any)

const AdminSquadsIndexRoute = AdminSquadsIndexImport.update({
  id: '/admin/squads/',
  path: '/admin/squads/',
  getParentRoute: () => rootRoute,
} as any)

const AdminPostsIndexRoute = AdminPostsIndexImport.update({
  id: '/admin/posts/',
  path: '/admin/posts/',
  getParentRoute: () => rootRoute,
} as any)

const SquadInviteTagNameRoute = SquadInviteTagNameImport.update({
  id: '/squad/invite/$tagName',
  path: '/squad/invite/$tagName',
  getParentRoute: () => rootRoute,
} as any)

const SquadEditTagNameRoute = SquadEditTagNameImport.update({
  id: '/squad/edit/$tagName',
  path: '/squad/edit/$tagName',
  getParentRoute: () => rootRoute,
} as any)

const PostEditPostIdRoute = PostEditPostIdImport.update({
  id: '/post/edit/$postId',
  path: '/post/edit/$postId',
  getParentRoute: () => rootRoute,
} as any)

const DiscussionsEditDiscussionIdRoute =
  DiscussionsEditDiscussionIdImport.update({
    id: '/discussions/edit/$discussionId',
    path: '/discussions/edit/$discussionId',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/recovery': {
      id: '/recovery'
      path: '/recovery'
      fullPath: '/recovery'
      preLoaderRoute: typeof RecoveryImport
      parentRoute: typeof rootRoute
    }
    '/dev/crop': {
      id: '/dev/crop'
      path: '/dev/crop'
      fullPath: '/dev/crop'
      preLoaderRoute: typeof DevCropImport
      parentRoute: typeof rootRoute
    }
    '/discussions/$discussionId': {
      id: '/discussions/$discussionId'
      path: '/discussions/$discussionId'
      fullPath: '/discussions/$discussionId'
      preLoaderRoute: typeof DiscussionsDiscussionIdImport
      parentRoute: typeof rootRoute
    }
    '/discussions/new': {
      id: '/discussions/new'
      path: '/discussions/new'
      fullPath: '/discussions/new'
      preLoaderRoute: typeof DiscussionsNewImport
      parentRoute: typeof rootRoute
    }
    '/integration/callback': {
      id: '/integration/callback'
      path: '/integration/callback'
      fullPath: '/integration/callback'
      preLoaderRoute: typeof IntegrationCallbackImport
      parentRoute: typeof rootRoute
    }
    '/me/edit': {
      id: '/me/edit'
      path: '/me/edit'
      fullPath: '/me/edit'
      preLoaderRoute: typeof MeEditImport
      parentRoute: typeof rootRoute
    }
    '/post/$postId': {
      id: '/post/$postId'
      path: '/post/$postId'
      fullPath: '/post/$postId'
      preLoaderRoute: typeof PostPostIdImport
      parentRoute: typeof rootRoute
    }
    '/post/new': {
      id: '/post/new'
      path: '/post/new'
      fullPath: '/post/new'
      preLoaderRoute: typeof PostNewImport
      parentRoute: typeof rootRoute
    }
    '/profile/$profileTag': {
      id: '/profile/$profileTag'
      path: '/profile/$profileTag'
      fullPath: '/profile/$profileTag'
      preLoaderRoute: typeof ProfileProfileTagImport
      parentRoute: typeof rootRoute
    }
    '/squad/$tagName': {
      id: '/squad/$tagName'
      path: '/squad/$tagName'
      fullPath: '/squad/$tagName'
      preLoaderRoute: typeof SquadTagNameImport
      parentRoute: typeof rootRoute
    }
    '/squad/new': {
      id: '/squad/new'
      path: '/squad/new'
      fullPath: '/squad/new'
      preLoaderRoute: typeof SquadNewImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/ai/': {
      id: '/ai/'
      path: '/ai'
      fullPath: '/ai'
      preLoaderRoute: typeof AiIndexImport
      parentRoute: typeof rootRoute
    }
    '/app/': {
      id: '/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/discussions/': {
      id: '/discussions/'
      path: '/discussions'
      fullPath: '/discussions'
      preLoaderRoute: typeof DiscussionsIndexImport
      parentRoute: typeof rootRoute
    }
    '/explore/': {
      id: '/explore/'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreIndexImport
      parentRoute: typeof rootRoute
    }
    '/feedback/': {
      id: '/feedback/'
      path: '/feedback'
      fullPath: '/feedback'
      preLoaderRoute: typeof FeedbackIndexImport
      parentRoute: typeof rootRoute
    }
    '/history/': {
      id: '/history/'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryIndexImport
      parentRoute: typeof rootRoute
    }
    '/me/': {
      id: '/me/'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof MeIndexImport
      parentRoute: typeof rootRoute
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/tags/': {
      id: '/tags/'
      path: '/tags'
      fullPath: '/tags'
      preLoaderRoute: typeof TagsIndexImport
      parentRoute: typeof rootRoute
    }
    '/discussions/edit/$discussionId': {
      id: '/discussions/edit/$discussionId'
      path: '/discussions/edit/$discussionId'
      fullPath: '/discussions/edit/$discussionId'
      preLoaderRoute: typeof DiscussionsEditDiscussionIdImport
      parentRoute: typeof rootRoute
    }
    '/post/edit/$postId': {
      id: '/post/edit/$postId'
      path: '/post/edit/$postId'
      fullPath: '/post/edit/$postId'
      preLoaderRoute: typeof PostEditPostIdImport
      parentRoute: typeof rootRoute
    }
    '/squad/edit/$tagName': {
      id: '/squad/edit/$tagName'
      path: '/squad/edit/$tagName'
      fullPath: '/squad/edit/$tagName'
      preLoaderRoute: typeof SquadEditTagNameImport
      parentRoute: typeof rootRoute
    }
    '/squad/invite/$tagName': {
      id: '/squad/invite/$tagName'
      path: '/squad/invite/$tagName'
      fullPath: '/squad/invite/$tagName'
      preLoaderRoute: typeof SquadInviteTagNameImport
      parentRoute: typeof rootRoute
    }
    '/admin/posts/': {
      id: '/admin/posts/'
      path: '/admin/posts'
      fullPath: '/admin/posts'
      preLoaderRoute: typeof AdminPostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/squads/': {
      id: '/admin/squads/'
      path: '/admin/squads'
      fullPath: '/admin/squads'
      preLoaderRoute: typeof AdminSquadsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/recovery': typeof RecoveryRoute
  '/dev/crop': typeof DevCropRoute
  '/discussions/$discussionId': typeof DiscussionsDiscussionIdRoute
  '/discussions/new': typeof DiscussionsNewRoute
  '/integration/callback': typeof IntegrationCallbackRoute
  '/me/edit': typeof MeEditRoute
  '/post/$postId': typeof PostPostIdRoute
  '/post/new': typeof PostNewRoute
  '/profile/$profileTag': typeof ProfileProfileTagRoute
  '/squad/$tagName': typeof SquadTagNameRoute
  '/squad/new': typeof SquadNewRoute
  '/admin': typeof AdminIndexRoute
  '/ai': typeof AiIndexRoute
  '/app': typeof AppIndexRoute
  '/auth': typeof AuthIndexRoute
  '/discussions': typeof DiscussionsIndexRoute
  '/explore': typeof ExploreIndexRoute
  '/feedback': typeof FeedbackIndexRoute
  '/history': typeof HistoryIndexRoute
  '/me': typeof MeIndexRoute
  '/search': typeof SearchIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/tags': typeof TagsIndexRoute
  '/discussions/edit/$discussionId': typeof DiscussionsEditDiscussionIdRoute
  '/post/edit/$postId': typeof PostEditPostIdRoute
  '/squad/edit/$tagName': typeof SquadEditTagNameRoute
  '/squad/invite/$tagName': typeof SquadInviteTagNameRoute
  '/admin/posts': typeof AdminPostsIndexRoute
  '/admin/squads': typeof AdminSquadsIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/recovery': typeof RecoveryRoute
  '/dev/crop': typeof DevCropRoute
  '/discussions/$discussionId': typeof DiscussionsDiscussionIdRoute
  '/discussions/new': typeof DiscussionsNewRoute
  '/integration/callback': typeof IntegrationCallbackRoute
  '/me/edit': typeof MeEditRoute
  '/post/$postId': typeof PostPostIdRoute
  '/post/new': typeof PostNewRoute
  '/profile/$profileTag': typeof ProfileProfileTagRoute
  '/squad/$tagName': typeof SquadTagNameRoute
  '/squad/new': typeof SquadNewRoute
  '/admin': typeof AdminIndexRoute
  '/ai': typeof AiIndexRoute
  '/app': typeof AppIndexRoute
  '/auth': typeof AuthIndexRoute
  '/discussions': typeof DiscussionsIndexRoute
  '/explore': typeof ExploreIndexRoute
  '/feedback': typeof FeedbackIndexRoute
  '/history': typeof HistoryIndexRoute
  '/me': typeof MeIndexRoute
  '/search': typeof SearchIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/tags': typeof TagsIndexRoute
  '/discussions/edit/$discussionId': typeof DiscussionsEditDiscussionIdRoute
  '/post/edit/$postId': typeof PostEditPostIdRoute
  '/squad/edit/$tagName': typeof SquadEditTagNameRoute
  '/squad/invite/$tagName': typeof SquadInviteTagNameRoute
  '/admin/posts': typeof AdminPostsIndexRoute
  '/admin/squads': typeof AdminSquadsIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/recovery': typeof RecoveryRoute
  '/dev/crop': typeof DevCropRoute
  '/discussions/$discussionId': typeof DiscussionsDiscussionIdRoute
  '/discussions/new': typeof DiscussionsNewRoute
  '/integration/callback': typeof IntegrationCallbackRoute
  '/me/edit': typeof MeEditRoute
  '/post/$postId': typeof PostPostIdRoute
  '/post/new': typeof PostNewRoute
  '/profile/$profileTag': typeof ProfileProfileTagRoute
  '/squad/$tagName': typeof SquadTagNameRoute
  '/squad/new': typeof SquadNewRoute
  '/admin/': typeof AdminIndexRoute
  '/ai/': typeof AiIndexRoute
  '/app/': typeof AppIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/discussions/': typeof DiscussionsIndexRoute
  '/explore/': typeof ExploreIndexRoute
  '/feedback/': typeof FeedbackIndexRoute
  '/history/': typeof HistoryIndexRoute
  '/me/': typeof MeIndexRoute
  '/search/': typeof SearchIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/tags/': typeof TagsIndexRoute
  '/discussions/edit/$discussionId': typeof DiscussionsEditDiscussionIdRoute
  '/post/edit/$postId': typeof PostEditPostIdRoute
  '/squad/edit/$tagName': typeof SquadEditTagNameRoute
  '/squad/invite/$tagName': typeof SquadInviteTagNameRoute
  '/admin/posts/': typeof AdminPostsIndexRoute
  '/admin/squads/': typeof AdminSquadsIndexRoute
  '/admin/users/': typeof AdminUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/recovery'
    | '/dev/crop'
    | '/discussions/$discussionId'
    | '/discussions/new'
    | '/integration/callback'
    | '/me/edit'
    | '/post/$postId'
    | '/post/new'
    | '/profile/$profileTag'
    | '/squad/$tagName'
    | '/squad/new'
    | '/admin'
    | '/ai'
    | '/app'
    | '/auth'
    | '/discussions'
    | '/explore'
    | '/feedback'
    | '/history'
    | '/me'
    | '/search'
    | '/settings'
    | '/tags'
    | '/discussions/edit/$discussionId'
    | '/post/edit/$postId'
    | '/squad/edit/$tagName'
    | '/squad/invite/$tagName'
    | '/admin/posts'
    | '/admin/squads'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/recovery'
    | '/dev/crop'
    | '/discussions/$discussionId'
    | '/discussions/new'
    | '/integration/callback'
    | '/me/edit'
    | '/post/$postId'
    | '/post/new'
    | '/profile/$profileTag'
    | '/squad/$tagName'
    | '/squad/new'
    | '/admin'
    | '/ai'
    | '/app'
    | '/auth'
    | '/discussions'
    | '/explore'
    | '/feedback'
    | '/history'
    | '/me'
    | '/search'
    | '/settings'
    | '/tags'
    | '/discussions/edit/$discussionId'
    | '/post/edit/$postId'
    | '/squad/edit/$tagName'
    | '/squad/invite/$tagName'
    | '/admin/posts'
    | '/admin/squads'
    | '/admin/users'
  id:
    | '__root__'
    | '/'
    | '/recovery'
    | '/dev/crop'
    | '/discussions/$discussionId'
    | '/discussions/new'
    | '/integration/callback'
    | '/me/edit'
    | '/post/$postId'
    | '/post/new'
    | '/profile/$profileTag'
    | '/squad/$tagName'
    | '/squad/new'
    | '/admin/'
    | '/ai/'
    | '/app/'
    | '/auth/'
    | '/discussions/'
    | '/explore/'
    | '/feedback/'
    | '/history/'
    | '/me/'
    | '/search/'
    | '/settings/'
    | '/tags/'
    | '/discussions/edit/$discussionId'
    | '/post/edit/$postId'
    | '/squad/edit/$tagName'
    | '/squad/invite/$tagName'
    | '/admin/posts/'
    | '/admin/squads/'
    | '/admin/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RecoveryRoute: typeof RecoveryRoute
  DevCropRoute: typeof DevCropRoute
  DiscussionsDiscussionIdRoute: typeof DiscussionsDiscussionIdRoute
  DiscussionsNewRoute: typeof DiscussionsNewRoute
  IntegrationCallbackRoute: typeof IntegrationCallbackRoute
  MeEditRoute: typeof MeEditRoute
  PostPostIdRoute: typeof PostPostIdRoute
  PostNewRoute: typeof PostNewRoute
  ProfileProfileTagRoute: typeof ProfileProfileTagRoute
  SquadTagNameRoute: typeof SquadTagNameRoute
  SquadNewRoute: typeof SquadNewRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AiIndexRoute: typeof AiIndexRoute
  AppIndexRoute: typeof AppIndexRoute
  AuthIndexRoute: typeof AuthIndexRoute
  DiscussionsIndexRoute: typeof DiscussionsIndexRoute
  ExploreIndexRoute: typeof ExploreIndexRoute
  FeedbackIndexRoute: typeof FeedbackIndexRoute
  HistoryIndexRoute: typeof HistoryIndexRoute
  MeIndexRoute: typeof MeIndexRoute
  SearchIndexRoute: typeof SearchIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  TagsIndexRoute: typeof TagsIndexRoute
  DiscussionsEditDiscussionIdRoute: typeof DiscussionsEditDiscussionIdRoute
  PostEditPostIdRoute: typeof PostEditPostIdRoute
  SquadEditTagNameRoute: typeof SquadEditTagNameRoute
  SquadInviteTagNameRoute: typeof SquadInviteTagNameRoute
  AdminPostsIndexRoute: typeof AdminPostsIndexRoute
  AdminSquadsIndexRoute: typeof AdminSquadsIndexRoute
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RecoveryRoute: RecoveryRoute,
  DevCropRoute: DevCropRoute,
  DiscussionsDiscussionIdRoute: DiscussionsDiscussionIdRoute,
  DiscussionsNewRoute: DiscussionsNewRoute,
  IntegrationCallbackRoute: IntegrationCallbackRoute,
  MeEditRoute: MeEditRoute,
  PostPostIdRoute: PostPostIdRoute,
  PostNewRoute: PostNewRoute,
  ProfileProfileTagRoute: ProfileProfileTagRoute,
  SquadTagNameRoute: SquadTagNameRoute,
  SquadNewRoute: SquadNewRoute,
  AdminIndexRoute: AdminIndexRoute,
  AiIndexRoute: AiIndexRoute,
  AppIndexRoute: AppIndexRoute,
  AuthIndexRoute: AuthIndexRoute,
  DiscussionsIndexRoute: DiscussionsIndexRoute,
  ExploreIndexRoute: ExploreIndexRoute,
  FeedbackIndexRoute: FeedbackIndexRoute,
  HistoryIndexRoute: HistoryIndexRoute,
  MeIndexRoute: MeIndexRoute,
  SearchIndexRoute: SearchIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  TagsIndexRoute: TagsIndexRoute,
  DiscussionsEditDiscussionIdRoute: DiscussionsEditDiscussionIdRoute,
  PostEditPostIdRoute: PostEditPostIdRoute,
  SquadEditTagNameRoute: SquadEditTagNameRoute,
  SquadInviteTagNameRoute: SquadInviteTagNameRoute,
  AdminPostsIndexRoute: AdminPostsIndexRoute,
  AdminSquadsIndexRoute: AdminSquadsIndexRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/recovery",
        "/dev/crop",
        "/discussions/$discussionId",
        "/discussions/new",
        "/integration/callback",
        "/me/edit",
        "/post/$postId",
        "/post/new",
        "/profile/$profileTag",
        "/squad/$tagName",
        "/squad/new",
        "/admin/",
        "/ai/",
        "/app/",
        "/auth/",
        "/discussions/",
        "/explore/",
        "/feedback/",
        "/history/",
        "/me/",
        "/search/",
        "/settings/",
        "/tags/",
        "/discussions/edit/$discussionId",
        "/post/edit/$postId",
        "/squad/edit/$tagName",
        "/squad/invite/$tagName",
        "/admin/posts/",
        "/admin/squads/",
        "/admin/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/recovery": {
      "filePath": "recovery.tsx"
    },
    "/dev/crop": {
      "filePath": "dev/crop.tsx"
    },
    "/discussions/$discussionId": {
      "filePath": "discussions/$discussionId.tsx"
    },
    "/discussions/new": {
      "filePath": "discussions/new.tsx"
    },
    "/integration/callback": {
      "filePath": "integration/callback.tsx"
    },
    "/me/edit": {
      "filePath": "me/edit.tsx"
    },
    "/post/$postId": {
      "filePath": "post/$postId.tsx"
    },
    "/post/new": {
      "filePath": "post/new.tsx"
    },
    "/profile/$profileTag": {
      "filePath": "profile/$profileTag.tsx"
    },
    "/squad/$tagName": {
      "filePath": "squad/$tagName.tsx"
    },
    "/squad/new": {
      "filePath": "squad/new.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/ai/": {
      "filePath": "ai/index.tsx"
    },
    "/app/": {
      "filePath": "app/index.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/discussions/": {
      "filePath": "discussions/index.tsx"
    },
    "/explore/": {
      "filePath": "explore/index.tsx"
    },
    "/feedback/": {
      "filePath": "feedback/index.tsx"
    },
    "/history/": {
      "filePath": "history/index.tsx"
    },
    "/me/": {
      "filePath": "me/index.tsx"
    },
    "/search/": {
      "filePath": "search/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/tags/": {
      "filePath": "tags/index.tsx"
    },
    "/discussions/edit/$discussionId": {
      "filePath": "discussions/edit.$discussionId.tsx"
    },
    "/post/edit/$postId": {
      "filePath": "post/edit.$postId.tsx"
    },
    "/squad/edit/$tagName": {
      "filePath": "squad/edit.$tagName.tsx"
    },
    "/squad/invite/$tagName": {
      "filePath": "squad/invite.$tagName.tsx"
    },
    "/admin/posts/": {
      "filePath": "admin/posts/index.tsx"
    },
    "/admin/squads/": {
      "filePath": "admin/squads/index.tsx"
    },
    "/admin/users/": {
      "filePath": "admin/users/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
