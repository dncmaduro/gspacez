/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RecoveryImport } from './routes/recovery'
import { Route as IndexImport } from './routes/index'
import { Route as SearchIndexImport } from './routes/search/index'
import { Route as MeIndexImport } from './routes/me/index'
import { Route as HistoryIndexImport } from './routes/history/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AiIndexImport } from './routes/ai/index'
import { Route as SquadNewImport } from './routes/squad/new'
import { Route as SquadTagNameImport } from './routes/squad/$tagName'
import { Route as ProfileProfileIdImport } from './routes/profile/$profileId'
import { Route as PostNewImport } from './routes/post/new'
import { Route as PostPostIdImport } from './routes/post/$postId'
import { Route as MeEditImport } from './routes/me/edit'
import { Route as IntegrationCallbackImport } from './routes/integration/callback'
import { Route as DevCropImport } from './routes/dev/crop'
import { Route as PostEditPostIdImport } from './routes/post/edit.$postId'

// Create/Update Routes

const RecoveryRoute = RecoveryImport.update({
  id: '/recovery',
  path: '/recovery',
  getParentRoute: () => rootRoute
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute
} as any)

const SearchIndexRoute = SearchIndexImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRoute
} as any)

const MeIndexRoute = MeIndexImport.update({
  id: '/me/',
  path: '/me/',
  getParentRoute: () => rootRoute
} as any)

const HistoryIndexRoute = HistoryIndexImport.update({
  id: '/history/',
  path: '/history/',
  getParentRoute: () => rootRoute
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => rootRoute
} as any)

const AiIndexRoute = AiIndexImport.update({
  id: '/ai/',
  path: '/ai/',
  getParentRoute: () => rootRoute
} as any)

const SquadNewRoute = SquadNewImport.update({
  id: '/squad/new',
  path: '/squad/new',
  getParentRoute: () => rootRoute
} as any)

const SquadTagNameRoute = SquadTagNameImport.update({
  id: '/squad/$tagName',
  path: '/squad/$tagName',
  getParentRoute: () => rootRoute
} as any)

const ProfileProfileIdRoute = ProfileProfileIdImport.update({
  id: '/profile/$profileId',
  path: '/profile/$profileId',
  getParentRoute: () => rootRoute
} as any)

const PostNewRoute = PostNewImport.update({
  id: '/post/new',
  path: '/post/new',
  getParentRoute: () => rootRoute
} as any)

const PostPostIdRoute = PostPostIdImport.update({
  id: '/post/$postId',
  path: '/post/$postId',
  getParentRoute: () => rootRoute
} as any)

const MeEditRoute = MeEditImport.update({
  id: '/me/edit',
  path: '/me/edit',
  getParentRoute: () => rootRoute
} as any)

const IntegrationCallbackRoute = IntegrationCallbackImport.update({
  id: '/integration/callback',
  path: '/integration/callback',
  getParentRoute: () => rootRoute
} as any)

const DevCropRoute = DevCropImport.update({
  id: '/dev/crop',
  path: '/dev/crop',
  getParentRoute: () => rootRoute
} as any)

const PostEditPostIdRoute = PostEditPostIdImport.update({
  id: '/post/edit/$postId',
  path: '/post/edit/$postId',
  getParentRoute: () => rootRoute
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/recovery': {
      id: '/recovery'
      path: '/recovery'
      fullPath: '/recovery'
      preLoaderRoute: typeof RecoveryImport
      parentRoute: typeof rootRoute
    }
    '/dev/crop': {
      id: '/dev/crop'
      path: '/dev/crop'
      fullPath: '/dev/crop'
      preLoaderRoute: typeof DevCropImport
      parentRoute: typeof rootRoute
    }
    '/integration/callback': {
      id: '/integration/callback'
      path: '/integration/callback'
      fullPath: '/integration/callback'
      preLoaderRoute: typeof IntegrationCallbackImport
      parentRoute: typeof rootRoute
    }
    '/me/edit': {
      id: '/me/edit'
      path: '/me/edit'
      fullPath: '/me/edit'
      preLoaderRoute: typeof MeEditImport
      parentRoute: typeof rootRoute
    }
    '/post/$postId': {
      id: '/post/$postId'
      path: '/post/$postId'
      fullPath: '/post/$postId'
      preLoaderRoute: typeof PostPostIdImport
      parentRoute: typeof rootRoute
    }
    '/post/new': {
      id: '/post/new'
      path: '/post/new'
      fullPath: '/post/new'
      preLoaderRoute: typeof PostNewImport
      parentRoute: typeof rootRoute
    }
    '/profile/$profileId': {
      id: '/profile/$profileId'
      path: '/profile/$profileId'
      fullPath: '/profile/$profileId'
      preLoaderRoute: typeof ProfileProfileIdImport
      parentRoute: typeof rootRoute
    }
    '/squad/$tagName': {
      id: '/squad/$tagName'
      path: '/squad/$tagName'
      fullPath: '/squad/$tagName'
      preLoaderRoute: typeof SquadTagNameImport
      parentRoute: typeof rootRoute
    }
    '/squad/new': {
      id: '/squad/new'
      path: '/squad/new'
      fullPath: '/squad/new'
      preLoaderRoute: typeof SquadNewImport
      parentRoute: typeof rootRoute
    }
    '/ai/': {
      id: '/ai/'
      path: '/ai'
      fullPath: '/ai'
      preLoaderRoute: typeof AiIndexImport
      parentRoute: typeof rootRoute
    }
    '/app/': {
      id: '/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof rootRoute
    }
    '/history/': {
      id: '/history/'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryIndexImport
      parentRoute: typeof rootRoute
    }
    '/me/': {
      id: '/me/'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof MeIndexImport
      parentRoute: typeof rootRoute
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexImport
      parentRoute: typeof rootRoute
    }
    '/post/edit/$postId': {
      id: '/post/edit/$postId'
      path: '/post/edit/$postId'
      fullPath: '/post/edit/$postId'
      preLoaderRoute: typeof PostEditPostIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/recovery': typeof RecoveryRoute
  '/dev/crop': typeof DevCropRoute
  '/integration/callback': typeof IntegrationCallbackRoute
  '/me/edit': typeof MeEditRoute
  '/post/$postId': typeof PostPostIdRoute
  '/post/new': typeof PostNewRoute
  '/profile/$profileId': typeof ProfileProfileIdRoute
  '/squad/$tagName': typeof SquadTagNameRoute
  '/squad/new': typeof SquadNewRoute
  '/ai': typeof AiIndexRoute
  '/app': typeof AppIndexRoute
  '/history': typeof HistoryIndexRoute
  '/me': typeof MeIndexRoute
  '/search': typeof SearchIndexRoute
  '/post/edit/$postId': typeof PostEditPostIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/recovery': typeof RecoveryRoute
  '/dev/crop': typeof DevCropRoute
  '/integration/callback': typeof IntegrationCallbackRoute
  '/me/edit': typeof MeEditRoute
  '/post/$postId': typeof PostPostIdRoute
  '/post/new': typeof PostNewRoute
  '/profile/$profileId': typeof ProfileProfileIdRoute
  '/squad/$tagName': typeof SquadTagNameRoute
  '/squad/new': typeof SquadNewRoute
  '/ai': typeof AiIndexRoute
  '/app': typeof AppIndexRoute
  '/history': typeof HistoryIndexRoute
  '/me': typeof MeIndexRoute
  '/search': typeof SearchIndexRoute
  '/post/edit/$postId': typeof PostEditPostIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/recovery': typeof RecoveryRoute
  '/dev/crop': typeof DevCropRoute
  '/integration/callback': typeof IntegrationCallbackRoute
  '/me/edit': typeof MeEditRoute
  '/post/$postId': typeof PostPostIdRoute
  '/post/new': typeof PostNewRoute
  '/profile/$profileId': typeof ProfileProfileIdRoute
  '/squad/$tagName': typeof SquadTagNameRoute
  '/squad/new': typeof SquadNewRoute
  '/ai/': typeof AiIndexRoute
  '/app/': typeof AppIndexRoute
  '/history/': typeof HistoryIndexRoute
  '/me/': typeof MeIndexRoute
  '/search/': typeof SearchIndexRoute
  '/post/edit/$postId': typeof PostEditPostIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/recovery'
    | '/dev/crop'
    | '/integration/callback'
    | '/me/edit'
    | '/post/$postId'
    | '/post/new'
    | '/profile/$profileId'
    | '/squad/$tagName'
    | '/squad/new'
    | '/ai'
    | '/app'
    | '/history'
    | '/me'
    | '/search'
    | '/post/edit/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/recovery'
    | '/dev/crop'
    | '/integration/callback'
    | '/me/edit'
    | '/post/$postId'
    | '/post/new'
    | '/profile/$profileId'
    | '/squad/$tagName'
    | '/squad/new'
    | '/ai'
    | '/app'
    | '/history'
    | '/me'
    | '/search'
    | '/post/edit/$postId'
  id:
    | '__root__'
    | '/'
    | '/recovery'
    | '/dev/crop'
    | '/integration/callback'
    | '/me/edit'
    | '/post/$postId'
    | '/post/new'
    | '/profile/$profileId'
    | '/squad/$tagName'
    | '/squad/new'
    | '/ai/'
    | '/app/'
    | '/history/'
    | '/me/'
    | '/search/'
    | '/post/edit/$postId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RecoveryRoute: typeof RecoveryRoute
  DevCropRoute: typeof DevCropRoute
  IntegrationCallbackRoute: typeof IntegrationCallbackRoute
  MeEditRoute: typeof MeEditRoute
  PostPostIdRoute: typeof PostPostIdRoute
  PostNewRoute: typeof PostNewRoute
  ProfileProfileIdRoute: typeof ProfileProfileIdRoute
  SquadTagNameRoute: typeof SquadTagNameRoute
  SquadNewRoute: typeof SquadNewRoute
  AiIndexRoute: typeof AiIndexRoute
  AppIndexRoute: typeof AppIndexRoute
  HistoryIndexRoute: typeof HistoryIndexRoute
  MeIndexRoute: typeof MeIndexRoute
  SearchIndexRoute: typeof SearchIndexRoute
  PostEditPostIdRoute: typeof PostEditPostIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RecoveryRoute: RecoveryRoute,
  DevCropRoute: DevCropRoute,
  IntegrationCallbackRoute: IntegrationCallbackRoute,
  MeEditRoute: MeEditRoute,
  PostPostIdRoute: PostPostIdRoute,
  PostNewRoute: PostNewRoute,
  ProfileProfileIdRoute: ProfileProfileIdRoute,
  SquadTagNameRoute: SquadTagNameRoute,
  SquadNewRoute: SquadNewRoute,
  AiIndexRoute: AiIndexRoute,
  AppIndexRoute: AppIndexRoute,
  HistoryIndexRoute: HistoryIndexRoute,
  MeIndexRoute: MeIndexRoute,
  SearchIndexRoute: SearchIndexRoute,
  PostEditPostIdRoute: PostEditPostIdRoute
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/recovery",
        "/dev/crop",
        "/integration/callback",
        "/me/edit",
        "/post/$postId",
        "/post/new",
        "/profile/$profileId",
        "/squad/$tagName",
        "/squad/new",
        "/ai/",
        "/app/",
        "/history/",
        "/me/",
        "/search/",
        "/post/edit/$postId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/recovery": {
      "filePath": "recovery.tsx"
    },
    "/dev/crop": {
      "filePath": "dev/crop.tsx"
    },
    "/integration/callback": {
      "filePath": "integration/callback.tsx"
    },
    "/me/edit": {
      "filePath": "me/edit.tsx"
    },
    "/post/$postId": {
      "filePath": "post/$postId.tsx"
    },
    "/post/new": {
      "filePath": "post/new.tsx"
    },
    "/profile/$profileId": {
      "filePath": "profile/$profileId.tsx"
    },
    "/squad/$tagName": {
      "filePath": "squad/$tagName.tsx"
    },
    "/squad/new": {
      "filePath": "squad/new.tsx"
    },
    "/ai/": {
      "filePath": "ai/index.tsx"
    },
    "/app/": {
      "filePath": "app/index.tsx"
    },
    "/history/": {
      "filePath": "history/index.tsx"
    },
    "/me/": {
      "filePath": "me/index.tsx"
    },
    "/search/": {
      "filePath": "search/index.tsx"
    },
    "/post/edit/$postId": {
      "filePath": "post/edit.$postId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
