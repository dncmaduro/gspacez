/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PostImport } from './routes/post'
import { Route as IndexImport } from './routes/index'
import { Route as PostIndexImport } from './routes/post/index'
import { Route as AppIndexImport } from './routes/app/index'
// Create/Update Routes

const PostRoute = PostImport.update({
  id: '/post',
  path: '/post',
  getParentRoute: () => rootRoute
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute
} as any)

const PostIndexRoute = PostIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostRoute
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => rootRoute
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/post': {
      id: '/post'
      path: '/post'
      fullPath: '/post'
      preLoaderRoute: typeof PostImport
      parentRoute: typeof rootRoute
    }
    '/app/': {
      id: '/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof rootRoute
    }
    '/post/': {
      id: '/post/'
      path: '/'
      fullPath: '/post/'
      preLoaderRoute: typeof PostIndexImport
      parentRoute: typeof PostImport
    }
  }
}

// Create and export the route tree

interface PostRouteChildren {
  PostIndexRoute: typeof PostIndexRoute
}

const PostRouteChildren: PostRouteChildren = {
  PostIndexRoute: PostIndexRoute
}

const PostRouteWithChildren = PostRoute._addFileChildren(PostRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/post': typeof PostRouteWithChildren
  '/app': typeof AppIndexRoute
  '/post/': typeof PostIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppIndexRoute
  '/post': typeof PostIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/post': typeof PostRouteWithChildren
  '/app/': typeof AppIndexRoute
  '/post/': typeof PostIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/post' | '/app' | '/post/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app' | '/post'
  id: '__root__' | '/' | '/post' | '/app/' | '/post/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostRoute: typeof PostRouteWithChildren
  AppIndexRoute: typeof AppIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostRoute: PostRouteWithChildren,
  AppIndexRoute: AppIndexRoute
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/post",
        "/app/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/post": {
      "filePath": "post.tsx",
      "children": [
        "/post/"
      ]
    },
    "/app/": {
      "filePath": "app/index.tsx"
    },
    "/post/": {
      "filePath": "post/index.tsx",
      "parent": "/post"
    }
  }
}
ROUTE_MANIFEST_END */
